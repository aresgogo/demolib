// Generated by: main
// TypeWriter: slice
// Directive: +gen on Rating

package libgogen

import (
	"math/rand"
	"sort"
)

// RatingSlice is a slice of type Rating. Use it where you would use []Rating.
type RatingSlice []Rating

// Shuffle returns a shuffled copy of RatingSlice, using a version of the Fisher-Yates shuffle. See: http://clipperhouse.github.io/gen/#Shuffle
func (rcv RatingSlice) Shuffle() RatingSlice {
	numItems := len(rcv)
	result := make(RatingSlice, numItems)
	copy(result, rcv)
	for i := 0; i < numItems; i++ {
		r := i + rand.Intn(numItems-i)
		result[r], result[i] = result[i], result[r]
	}
	return result
}

// Sort returns a new ordered RatingSlice. See: http://clipperhouse.github.io/gen/#Sort
func (rcv RatingSlice) Sort() RatingSlice {
	result := make(RatingSlice, len(rcv))
	copy(result, rcv)
	sort.Sort(result)
	return result
}

// SortDesc returns a new reverse-ordered RatingSlice. See: http://clipperhouse.github.io/gen/#Sort
func (rcv RatingSlice) SortDesc() RatingSlice {
	result := make(RatingSlice, len(rcv))
	copy(result, rcv)
	sort.Sort(sort.Reverse(result))
	return result
}

func (rcv RatingSlice) Len() int {
	return len(rcv)
}
func (rcv RatingSlice) Less(i, j int) bool {
	return rcv[i] < rcv[j]
}
func (rcv RatingSlice) Swap(i, j int) {
	rcv[i], rcv[j] = rcv[j], rcv[i]
}
