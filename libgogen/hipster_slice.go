// Generated by: main
// TypeWriter: slice
// Directive: +gen on Hipster

package libgogen

// HipsterSlice is a slice of type Hipster. Use it where you would use []Hipster.
type HipsterSlice []Hipster

// Distinct returns a new HipsterSlice whose elements are unique. See: http://clipperhouse.github.io/gen/#Distinct
func (rcv HipsterSlice) Distinct() (result HipsterSlice) {
	appended := make(map[Hipster]bool)
	for _, v := range rcv {
		if !appended[v] {
			result = append(result, v)
			appended[v] = true
		}
	}
	return result
}

// DistinctBy returns a new HipsterSlice whose elements are unique, where equality is defined by a passed func. See: http://clipperhouse.github.io/gen/#DistinctBy
func (rcv HipsterSlice) DistinctBy(equal func(Hipster, Hipster) bool) (result HipsterSlice) {
Outer:
	for _, v := range rcv {
		for _, r := range result {
			if equal(v, r) {
				continue Outer
			}
		}
		result = append(result, v)
	}
	return result
}
