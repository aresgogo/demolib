// Generated by: main
// TypeWriter: slice
// Directive: +gen on Player

package libgogen

import "errors"

// PlayerSlice is a slice of type Player. Use it where you would use []Player.
type PlayerSlice []Player

// AverageInt sums int over all elements and divides by len(PlayerSlice). See: http://clipperhouse.github.io/gen/#Average
func (rcv PlayerSlice) AverageInt(fn func(Player) int) (result int, err error) {
	l := len(rcv)
	if l == 0 {
		err = errors.New("cannot determine Average[int] of zero-length PlayerSlice")
		return
	}
	for _, v := range rcv {
		result += fn(v)
	}
	result = result / int(l)
	return
}

// SelectInt projects a slice of int from PlayerSlice, typically called a map in other frameworks. See: http://clipperhouse.github.io/gen/#Select
func (rcv PlayerSlice) SelectInt(fn func(Player) int) (result []int) {
	for _, v := range rcv {
		result = append(result, fn(v))
	}
	return
}
